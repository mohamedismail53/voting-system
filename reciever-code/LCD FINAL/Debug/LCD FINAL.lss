
LCD FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e4c  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c1  00000000  00000000  0000186b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c2  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f4  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  8a:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
void fun_yes (void)
{ 	
	y++;
	LCD_Set_Cursor(2,2);
	itoa(y, str_yes,10);
	LCD_String(str_yes);	
  92:	8b bb       	out	0x1b, r24	; 27
  94:	a8 98       	cbi	0x15, 0	; 21
  96:	a9 98       	cbi	0x15, 1	; 21
  98:	aa 9a       	sbi	0x15, 2	; 21
  9a:	00 00       	nop
  9c:	aa 98       	cbi	0x15, 2	; 21
  9e:	8d ee       	ldi	r24, 0xED	; 237
  a0:	92 e0       	ldi	r25, 0x02	; 2
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Command+0x16>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Init>:
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	87 e8       	ldi	r24, 0x87	; 135
  b4:	93 e1       	ldi	r25, 0x13	; 19
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Init+0xa>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Init+0x10>
  bc:	00 00       	nop
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  dc:	08 95       	ret

000000de <LCD_Set_Cursor>:
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	d6 2f       	mov	r29, r22
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	69 f4       	brne	.+26     	; 0x102 <LCD_Set_Cursor+0x24>
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  ee:	dd 23       	and	r29, r29
  f0:	b1 f0       	breq	.+44     	; 0x11e <LCD_Set_Cursor+0x40>
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	84 e1       	ldi	r24, 0x14	; 20
  f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
  fa:	cf 5f       	subi	r28, 0xFF	; 255
  fc:	dc 13       	cpse	r29, r28
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <LCD_Set_Cursor+0x16>
 100:	0e c0       	rjmp	.+28     	; 0x11e <LCD_Set_Cursor+0x40>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	61 f4       	brne	.+24     	; 0x11e <LCD_Set_Cursor+0x40>
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 10c:	dd 23       	and	r29, r29
 10e:	39 f0       	breq	.+14     	; 0x11e <LCD_Set_Cursor+0x40>
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	84 e1       	ldi	r24, 0x14	; 20
 114:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 118:	cf 5f       	subi	r28, 0xFF	; 255
 11a:	dc 13       	cpse	r29, r28
 11c:	fa cf       	rjmp	.-12     	; 0x112 <LCD_Set_Cursor+0x34>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_Char>:
 124:	8b bb       	out	0x1b, r24	; 27
 126:	a8 9a       	sbi	0x15, 0	; 21
 128:	a9 98       	cbi	0x15, 1	; 21
 12a:	aa 9a       	sbi	0x15, 2	; 21
 12c:	00 00       	nop
 12e:	aa 98       	cbi	0x15, 2	; 21
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Char+0x10>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Char+0x16>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <LCD_String>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
 144:	88 81       	ld	r24, Y
 146:	88 23       	and	r24, r24
 148:	31 f0       	breq	.+12     	; 0x156 <LCD_String+0x18>
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Char>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <LCD_String+0xe>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
}


int main(void)
{
	LCD_Init();
 15c:	0e 94 56 00 	call	0xac	; 0xac <LCD_Init>
	LCD_Set_Cursor(1,1);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 6f 00 	call	0xde	; 0xde <LCD_Set_Cursor>
	LCD_String(" YES  ");
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
	LCD_String("NO  ");
 170:	87 e6       	ldi	r24, 0x67	; 103
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
	LCD_String("ABST ");
 178:	8c e6       	ldi	r24, 0x6C	; 108
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <LCD_String>
	DDRC=0xff;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 bb       	out	0x14, r24	; 20
	DDRA=0xff;
 184:	8a bb       	out	0x1a, r24	; 26
	
	DDRD=0X00;
 186:	11 ba       	out	0x11, r1	; 17
	
	
	while(1)
	{
		if ((PIND==COUNT_YES)&&y==0)
 188:	80 b3       	in	r24, 0x10	; 16
			fun_yes;
		if ((PIND==COUNT_NO)&&n==0)
 18a:	80 b3       	in	r24, 0x10	; 16
			fun_no;
		if ((PIND==COUNT_ABST)&&a==0)
 18c:	80 b3       	in	r24, 0x10	; 16
 18e:	fc cf       	rjmp	.-8      	; 0x188 <main+0x2c>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
